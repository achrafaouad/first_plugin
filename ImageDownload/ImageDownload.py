# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ImageDownload
                                 A QGIS plugin
  and applay some indexes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2021 by achrafaouad
        email                : achrafaouad7@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QAbstractTableModel
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt import *
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *
from random import randint
from pathlib import Path
import os.path
import urllib.request
# Import the code for the dialog
from .ImageDownload_dialog import ImageDownloadDialog
import os.path
from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsFields,
    QgsField,
    QgsGeometry,
    QgsFeature
)
import processing
from PyQt5.QtCore import *
from qgis.core import *
from qgis.utils import iface
from qgis.analysis import *
from sentinelsat import SentinelAPI, read_geojson, geojson_to_wkt
from datetime import date
import sys
import requests
from PyQt5.QtWidgets import QApplication, QWidget, QLabel
from PyQt5.QtGui import QImage, QPixmap






class ImageDownload:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.sentinel_list = ["Sentinel-1", "Sentinel-2"]
        self.url_image=[]
        self.index="a"
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ImageDownload_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ImageDownload')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ImageDownload', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ImageDownload/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ImageDownload'),
                action)
            self.iface.removeToolBarIcon(action)




    def on_clicked(self,index):
        api = SentinelAPI('a.aouad', 'liveLIVE123', 'https://scihub.copernicus.eu/dhus')
        id_image = self.dlg.listView.model().itemData(index)
        print(id_image.get(0))
        api.download(id_image.get(0), directory_path=r'C:\Users\hp\Desktop\Geoinformation_4\Mr_Yazid', checksum=True)

    def searchList(self):
        api = SentinelAPI('a.aouad', 'liveLIVE123', 'https://scihub.copernicus.eu/dhus')
        start_Date = self.dlg.start_Date_Edit.date().toString("yyyyMMdd")
        end_Date = self.dlg.end_Date_Edit.date().toString("yyyyMMdd")
        selectedTypeSentinelIndex = self.dlg.comboBox.currentIndex()
        products = api.query(None, date=(start_Date, end_Date), platformname=self.sentinel_list[selectedTypeSentinelIndex], limit=100)
        print(products)
        number = api.count(None, date=(start_Date, end_Date), platformname='Sentinel-2')
        #self.dlg.result_label.setText(str(number) + " Résultats trouvées")#########

        # products_df = api.to_dataframe(products)
        # print(list(products_df.columns.values))
        print("akarena")
        a = dict(products)
        for uuid, image_data in a.items():
            print(image_data["title"])
        # Define model for the list view to add the found satellite images
        model = QtGui.QStandardItemModel()
        self.dlg.listView.setModel(model)

        i = 0
        # Add satellite images to the listview
        for uuid, image_data in a.items():
            print(uuid)
            item = QtGui.QStandardItem(uuid)
            model.appendRow(item)

        # onclicked
        self.dlg.listView.clicked[QtCore.QModelIndex].connect(self.show_image)

    def show_image(self):
        self.url_image.append("https://www.rncan.gc.ca/sites/www.nrcan.gc.ca/files/earthsciences/images/resource/tutor/fundam/images/ottbw.jpg")
        self.url_image.append("https://www.satcen.europa.eu/picturesweb/SAR_158da71e1d3ceae0a18e28362.jpg")
        self.url_image.append("https://maxarv2-cms-production.s3.amazonaws.com/uploads/image/image_value/1139/DC_radarsatimages_0000_Layer_radar.jpg")
        self.url_image.append("https://s3.amazonaws.com/content.satimagingcorp.com/media/cms_page_media/1555/TerraSAR-X-Satellite-Image-Aswan-Dam-med.jpg")
        self.url_image.append("http://www.un-autre-regard-sur-la-terre.org/document/blogUARST/Risques%20et%20catastrophes/Inondations%20-%20France%20-%20Juin%202016/Sentinel-1A%20-%20Paris%20-%20Inondations%20-%2031-05-2016%20-%2017h40%20-%20Extrait.jpg")
        image = QImage()
        self.index=self.url_image[randint(0,4)]
        image.loadFromData(requests.get(self.index).content)
        image_label = self.dlg.label_image
        image_label.setPixmap(QPixmap(image))
        image_label.show()

    def download_image(self):
        if(self.index=="a"):
            self.dlg.label_worning.setText("THERE ARE NO AVAILABLE IMAGES")
        else:
            self.dlg.label_worning.setText("")
            name = self.dlg.filename.text()
            filename = '{}.jpg'.format(name)
            full_path = '{}/{}'.format(self.dlg.path_image.text(), filename)
            urllib.request.urlretrieve(self.index, full_path)



    def select_output_file(self):
        path = Path(__file__).parent.absolute()
        self.dlg.path_image.setText(str(path))

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ImageDownloadDialog()
            self.dlg.comboBox.addItems(self.sentinel_list)
            self.dlg.label_worning.setText("")
            self.dlg.search_Button.clicked.connect(self.searchList)
            path = self.dlg.path_btn
            path.clicked.connect(lambda: self.select_output_file())
            self.dlg.download_btn.clicked.connect(self.download_image)
            self.dlg.download_btn.clicked.connect(self.download_image)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


